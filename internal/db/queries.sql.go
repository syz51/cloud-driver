// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDrive115Credentials = `-- name: CreateDrive115Credentials :one
INSERT INTO drive115_credentials (user_id, name, uid, cid, seid, kid, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, name, uid, cid, seid, kid, is_active, created_at, updated_at
`

type CreateDrive115CredentialsParams struct {
	UserID   int32       `db:"user_id" json:"user_id"`
	Name     string      `db:"name" json:"name"`
	Uid      string      `db:"uid" json:"uid"`
	Cid      string      `db:"cid" json:"cid"`
	Seid     string      `db:"seid" json:"seid"`
	Kid      string      `db:"kid" json:"kid"`
	IsActive pgtype.Bool `db:"is_active" json:"is_active"`
}

// Drive115 credentials management queries
func (q *Queries) CreateDrive115Credentials(ctx context.Context, arg CreateDrive115CredentialsParams) (Drive115Credential, error) {
	row := q.db.QueryRow(ctx, createDrive115Credentials,
		arg.UserID,
		arg.Name,
		arg.Uid,
		arg.Cid,
		arg.Seid,
		arg.Kid,
		arg.IsActive,
	)
	var i Drive115Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Uid,
		&i.Cid,
		&i.Seid,
		&i.Kid,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash)
VALUES ($1, $2, $3)
RETURNING id, username, email, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	Username     string `db:"username" json:"username"`
	Email        string `db:"email" json:"email"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
}

// User management queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (user_id, session_token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, session_token, expires_at, created_at
`

type CreateUserSessionParams struct {
	UserID       int32            `db:"user_id" json:"user_id"`
	SessionToken string           `db:"session_token" json:"session_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

// User session management queries
func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.UserID, arg.SessionToken, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateAllUserDrive115Credentials = `-- name: DeactivateAllUserDrive115Credentials :exec
UPDATE drive115_credentials 
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) DeactivateAllUserDrive115Credentials(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deactivateAllUserDrive115Credentials, userID)
	return err
}

const deleteDrive115Credentials = `-- name: DeleteDrive115Credentials :exec
DELETE FROM drive115_credentials WHERE id = $1
`

func (q *Queries) DeleteDrive115Credentials(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDrive115Credentials, id)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions WHERE expires_at <= CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM user_sessions WHERE session_token = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteUserSession, sessionToken)
	return err
}

const deleteUserSessionsByUserID = `-- name: DeleteUserSessionsByUserID :exec
DELETE FROM user_sessions WHERE user_id = $1
`

func (q *Queries) DeleteUserSessionsByUserID(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserSessionsByUserID, userID)
	return err
}

const getActiveDrive115CredentialsByUserID = `-- name: GetActiveDrive115CredentialsByUserID :many
SELECT id, user_id, name, uid, cid, seid, kid, is_active, created_at, updated_at FROM drive115_credentials 
WHERE user_id = $1 AND is_active = true 
ORDER BY created_at DESC
`

func (q *Queries) GetActiveDrive115CredentialsByUserID(ctx context.Context, userID int32) ([]Drive115Credential, error) {
	rows, err := q.db.Query(ctx, getActiveDrive115CredentialsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Drive115Credential{}
	for rows.Next() {
		var i Drive115Credential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Uid,
			&i.Cid,
			&i.Seid,
			&i.Kid,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDrive115CredentialsByID = `-- name: GetDrive115CredentialsByID :one
SELECT id, user_id, name, uid, cid, seid, kid, is_active, created_at, updated_at FROM drive115_credentials WHERE id = $1
`

func (q *Queries) GetDrive115CredentialsByID(ctx context.Context, id int32) (Drive115Credential, error) {
	row := q.db.QueryRow(ctx, getDrive115CredentialsByID, id)
	var i Drive115Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Uid,
		&i.Cid,
		&i.Seid,
		&i.Kid,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDrive115CredentialsByUserID = `-- name: GetDrive115CredentialsByUserID :many
SELECT id, user_id, name, uid, cid, seid, kid, is_active, created_at, updated_at FROM drive115_credentials 
WHERE user_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetDrive115CredentialsByUserID(ctx context.Context, userID int32) ([]Drive115Credential, error) {
	rows, err := q.db.Query(ctx, getDrive115CredentialsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Drive115Credential{}
	for rows.Next() {
		var i Drive115Credential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Uid,
			&i.Cid,
			&i.Seid,
			&i.Kid,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDrive115CredentialsByUserIDAndName = `-- name: GetDrive115CredentialsByUserIDAndName :one
SELECT id, user_id, name, uid, cid, seid, kid, is_active, created_at, updated_at FROM drive115_credentials 
WHERE user_id = $1 AND name = $2
`

type GetDrive115CredentialsByUserIDAndNameParams struct {
	UserID int32  `db:"user_id" json:"user_id"`
	Name   string `db:"name" json:"name"`
}

func (q *Queries) GetDrive115CredentialsByUserIDAndName(ctx context.Context, arg GetDrive115CredentialsByUserIDAndNameParams) (Drive115Credential, error) {
	row := q.db.QueryRow(ctx, getDrive115CredentialsByUserIDAndName, arg.UserID, arg.Name)
	var i Drive115Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Uid,
		&i.Cid,
		&i.Seid,
		&i.Kid,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSessionByToken = `-- name: GetUserSessionByToken :one
SELECT us.id, us.user_id, us.session_token, us.expires_at, us.created_at, u.username, u.email 
FROM user_sessions us
JOIN users u ON us.user_id = u.id
WHERE us.session_token = $1 AND us.expires_at > CURRENT_TIMESTAMP
`

type GetUserSessionByTokenRow struct {
	ID           int32            `db:"id" json:"id"`
	UserID       int32            `db:"user_id" json:"user_id"`
	SessionToken string           `db:"session_token" json:"session_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
	Username     string           `db:"username" json:"username"`
	Email        string           `db:"email" json:"email"`
}

func (q *Queries) GetUserSessionByToken(ctx context.Context, sessionToken string) (GetUserSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserSessionByToken, sessionToken)
	var i GetUserSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const getUserSessionsByUserID = `-- name: GetUserSessionsByUserID :many
SELECT id, user_id, session_token, expires_at, created_at FROM user_sessions 
WHERE user_id = $1 AND expires_at > CURRENT_TIMESTAMP
ORDER BY created_at DESC
`

func (q *Queries) GetUserSessionsByUserID(ctx context.Context, userID int32) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, getUserSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionToken,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDrive115CredentialsActive = `-- name: SetDrive115CredentialsActive :exec
UPDATE drive115_credentials 
SET is_active = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type SetDrive115CredentialsActiveParams struct {
	ID       int32       `db:"id" json:"id"`
	IsActive pgtype.Bool `db:"is_active" json:"is_active"`
}

func (q *Queries) SetDrive115CredentialsActive(ctx context.Context, arg SetDrive115CredentialsActiveParams) error {
	_, err := q.db.Exec(ctx, setDrive115CredentialsActive, arg.ID, arg.IsActive)
	return err
}

const updateDrive115Credentials = `-- name: UpdateDrive115Credentials :one
UPDATE drive115_credentials 
SET name = $2, uid = $3, cid = $4, seid = $5, kid = $6, is_active = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, name, uid, cid, seid, kid, is_active, created_at, updated_at
`

type UpdateDrive115CredentialsParams struct {
	ID       int32       `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	Uid      string      `db:"uid" json:"uid"`
	Cid      string      `db:"cid" json:"cid"`
	Seid     string      `db:"seid" json:"seid"`
	Kid      string      `db:"kid" json:"kid"`
	IsActive pgtype.Bool `db:"is_active" json:"is_active"`
}

func (q *Queries) UpdateDrive115Credentials(ctx context.Context, arg UpdateDrive115CredentialsParams) (Drive115Credential, error) {
	row := q.db.QueryRow(ctx, updateDrive115Credentials,
		arg.ID,
		arg.Name,
		arg.Uid,
		arg.Cid,
		arg.Seid,
		arg.Kid,
		arg.IsActive,
	)
	var i Drive115Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Uid,
		&i.Cid,
		&i.Seid,
		&i.Kid,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET username = $2, email = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, email, password_hash, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32  `db:"id" json:"id"`
	Username string `db:"username" json:"username"`
	Email    string `db:"email" json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
